" Plugin type ":PlugInstall" to install
call plug#begin()
Plug 'junegunn/vim-easy-align'
Plug 'https://github.com/junegunn/vim-github-dashboard.git'
Plug 'preservim/nerdtree', { 'on': 'NERDTreeToggle' }
Plug 'tpope/vim-fireplace', { 'for': 'clojure' }
Plug 'rdnetto/YCM-Generator', { 'branch': 'stable' }
Plug 'NLKNguyen/papercolor-theme'
Plug 'airblade/vim-rooter'
Plug 'nsf/gocode', { 'tag': 'v.20150303', 'rtp': 'vim' }
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug '~/my-prototype-plugin'
call plug#end()

" Check if the plugin directory is empty
function! CheckAndInstallPlugins()
  if len(glob('~/.vim/plugged/*')) == 0
    echo "Installing Vim plugins..."
    PlugInstall | q
  endif
endfunction
call CheckAndInstallPlugins()

" Style
syntax on 
set number
set splitbelow
set splitright
set scrolloff=3
set relativenumber
hi CursorLineNr guifg=#af00af
set cursorline
set cursorlineopt=number 
let g:NERDTreeWinPos = "right"

" Search
set hlsearch
set ignorecase
set incsearch
set smartcase
noremap <CR> :nohlsearch<CR>

" Gerenal
set showcmd
set noswapfile
set linebreak
set clipboard=unnamedplus
let g:rooter_patterns = ['.git', 'Makefile', '*.sln', 'build/env.sh']

" Tab Space
set expandtab
set tabstop=4
set softtabstop=4
set shiftwidth=4
set showtabline=2
set scrolloff=8
set sidescrolloff=8

" Key Mappings
:let mapleader = "\<Space>"
inoremap kj <Esc>
nnoremap <leader>w :w<CR>
nnoremap <leader>q :q<CR>
nnoremap <leader>Q :q!<CR>
nnoremap <leader>e :NERDTreeToggle<CR>

nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

nnoremap <S-j> <C-e>
nnoremap <S-k> <C-y>

nnoremap <leader>ff :Files<CR>

" Autocomplete
autocmd BufWritePost ~/.local/share/chezmoi/* ! chezmoi apply --source-path "%"

" Fzf
let g:fzf_vim = {}

" Kitty terminal settings
" Mouse support
set mouse=a
set ttymouse=sgr
set balloonevalterm
" Styled and colored underline support
let &t_AU = "\e[58:5:%dm"
let &t_8u = "\e[58:2:%lu:%lu:%lum"
let &t_Us = "\e[4:2m"
let &t_Cs = "\e[4:3m"
let &t_ds = "\e[4:4m"
let &t_Ds = "\e[4:5m"
let &t_Ce = "\e[4:0m"
" Strikethrough
let &t_Ts = "\e[9m"
let &t_Te = "\e[29m"
" Truecolor support
let &t_8f = "\e[38:2:%lu:%lu:%lum"
let &t_8b = "\e[48:2:%lu:%lu:%lum"
let &t_RF = "\e]10;?\e\\"
let &t_RB = "\e]11;?\e\\"
" Bracketed paste
let &t_BE = "\e[?2004h"
let &t_BD = "\e[?2004l"
let &t_PS = "\e[200~"
let &t_PE = "\e[201~"
" Cursor control
let &t_RC = "\e[?12$p"
let &t_SH = "\e[%d q"
let &t_RS = "\eP$q q\e\\"
let &t_SI = "\e[5 q"
let &t_SR = "\e[3 q"
let &t_EI = "\e[1 q"
let &t_VS = "\e[?12l"
" Focus tracking
let &t_fe = "\e[?1004h"
let &t_fd = "\e[?1004l"
execute "set <FocusGained>=\<Esc>[I"
execute "set <FocusLost>=\<Esc>[O"
" Window title
let &t_ST = "\e[22;2t"
let &t_RT = "\e[23;2t"

" vim hardcodes background color erase even if the terminfo file does
" not contain bce. This causes incorrect background rendering when
" using a color theme with a background color in terminals such as
" kitty that do not support background color erase.
let &t_ut=''

set background=dark
colorscheme PaperColor
